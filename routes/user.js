const express = require("express");
const router = express.Router();
const {User} = require("../db/index"); 
const { validateUserSignup, validateUserSignin, validateUserUpdate } = require("../middlewares/UserMiddlewares");
const jwt = require("jsonwebtoken");
require('dotenv').config();
const bcrypt = require("bcrypt");

router.post("/signup", validateUserSignup, async (req, res) => {
    try {
        // Destructure the validated data from the request body
        const { name, email, password } = req.body;

        // Hash the password before storing it
        // You can use bcrypt or another library to hash the password
        const bcrypt = require("bcrypt");
        const saltRounds = 10;
        const password_hash = await bcrypt.hash(password, saltRounds);

        // Create a new user instance
        const newUser = new User({
            name,
            email,
            password_hash,
            // Registration OTP will be generated by the schema's default value
        });

        // Save the user to the database
        await newUser.save();

        // Send a success response
        return res.status(201).json({
            message: "User registered successfully.",
            userId: newUser.id, // Return the user's ID or any other relevant information
        });
    } catch (error) {
        console.error("Error creating user:", error);
        return res.status(500).json({
            errors: ["Internal server error."],
        });
    }
});


router.post("/signin", validateUserSignin,(req,res)=>{
    // all checks done create a jwt token using user's email and send it in response 
    const { email, password } = req.body;
    const token = jwt.sign({ email }, process.env.JWT_SECRET, {
        expiresIn: "12h",
    });
    return res.json({
        message: "User signed in successfully.",
        token,
    });
})

router.put("/edit-user", validateUserUpdate, async (req, res) => {
    try {
        //decode jwt token in header to get original email
        const token = req.headers.authorization;
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const email = decoded.email;
        //find user with that email in db
        const updateUser= await User.findOne({ email })
        //if no user found send error
        if (!updateUser) {
            return res.status(400).json({
                errors: ["No user with this email exists."],
            });
        }
        //update details
        updateUser.name=req.body.name;
        updateUser.email=req.body.email;
        //store hashed password
        updateUser.password_hash = await bcrypt.hash(req.body.password, 10);
        //save updated user
        await updateUser.save();
        //if user updated the email compare email in jwt and req body, then send new token to user as well
        if(email!==req.body.email){
            const token = jwt.sign({ email:req.body.email }, process.env.JWT_SECRET, {
                expiresIn: "12h",
            });
            return res.json({
                message: "User updated successfully.",
                token,
            });
        }
        //send success response
        return res.status(200).json({
            message: "User updated successfully.",
        });
    } catch (error) {
        console.error("Error updating user:", error);
        return res.status(500).json({
            errors: ["Internal server error."],
        });
    }
});

module.exports = router;
